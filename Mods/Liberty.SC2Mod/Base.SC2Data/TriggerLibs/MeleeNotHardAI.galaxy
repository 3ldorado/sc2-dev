//==================================================================================================
//  Melee AI Functions only used by beginner/easy/medium.
//--------------------------------------------------------------------------------------------------
// Very Easy
//  APM: 100
//  scouts: starts late game
//  detect: late game or after being attacked by cloakers
//  wave 1: 100 resources, ~2 units, 480 seconds
//  wave 2: 300 resources, ~3 units, +360 seconds (840)
//  wave 3: 600 resources, ~4 units, +360 seconds (1200)
//  wave X: 900 resources, ~5 units, +300 seconds
//--------------------------------------------------------------------------------------------------
// Easy
//  APM: 200
//  scouts: starts late game
//  detect: late game or after being attacked by cloakers
//  wave 1: 300 resources, ~4 units, 450 seconds
//  wave 2: 800 resources, ~6 units, +340 seconds (790)
//  wave 3: 1500 resources, ~8 units, +340 seconds (1130)
//  wave X: xxx resources, ~10 units, +280 seconds
//--------------------------------------------------------------------------------------------------
// Medium
//  APM: 300
//  scouts: starts middle game
//  detect: middle game or after being attacked by cloakers
//  wave 1: 500 resources, ~6 units, 420 seconds
//  wave 2: 1000 resources, ~9 units, +320 seconds (740)
//  wave 3: 1800 resources, ~12 units, +320 seconds (1060)
//  wave X: xxx resources, ~15 units, +260 seconds
//--------------------------------------------------------------------------------------------------
// Hard
//  APM: 400
//  scouts: starts early game
//  detect: middle game or after being attacked by cloakers
//  wave 1: 700 resources, ~8 units, 390 seconds
//  wave 2: 1200 resources, ~12 units, +300 seconds (690)
//  wave 3: 2100 resources, ~16 units, +300 seconds (990)
//  wave X: xxx resources, ~20 units, +240 seconds
//==================================================================================================

//==================================================================================================
//  OPEN
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  AIGenericStock
//--------------------------------------------------------------------------------------------------
static void AIGenericStock (int player, int state1, int state2) {
    AIWaveMerge(player, c_waveMain, c_waveAttack);
    AISetAttackState(player, e_attackState_Attack);
    AISetMainState(player, state1, state2);
	AIResetUserData(player);
}

//--------------------------------------------------------------------------------------------------
//  AIEnableStockOpen
//--------------------------------------------------------------------------------------------------
static bool AIEnableStockOpen (int player, string peonType, int time, bool veryEasy, int nextState) {
    AIEnableStock(player);
    if (veryEasy) {
        if (AITechCount(player, peonType, c_techCountCompleteOnly) >= 8) {
            AISetGasPeonCountOverride(player, c_townMain, 2);
        }
        else {
            AISetGasPeonCountOverride(player, c_townMain, 0);
        }
    }
    if (AIGetTime() < time) {
        return true;
    }
    AIGenericStock(player, nextState, e_mainSubState_GndA);
    return false;
}

bool AIEnableVeryEasyStockOpen (int player, string peonType) {
    return AIEnableStockOpen(player, peonType, 480, true, e_mainState_Mid0);
}
bool AIEnableEasyStockOpen (int player, string peonType) {
    return AIEnableStockOpen(player, peonType, 450, false, e_mainState_Mid1);
}
bool AIEnableMediumStockOpen (int player, string peonType) {
    return AIEnableStockOpen(player, peonType, 420, false, e_mainState_Mid2);
}
bool AIEnableHardStockOpen (int player, string peonType) {
    return AIEnableStockOpen(player, peonType, 390, false, e_mainState_Mid3);
}

//==================================================================================================
//  MID A
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  AIVeryEasyHarvest
//--------------------------------------------------------------------------------------------------
void AIVeryEasyHarvest (int player, string peonType, int count) {
    if (AIHasRes(player, 0, 200) || AITechCount(player, peonType, c_techCountCompleteOnly) < 8) {
        AISetGasPeonCountOverride(player, c_townMain, c_defaultGasPeonCount);
    }
    else {
        AISetGasPeonCountOverride(player, c_townMain, count);
    }
}

//--------------------------------------------------------------------------------------------------
//	AIEnableStockMidA
//--------------------------------------------------------------------------------------------------
static bool AIEnableStockMidA (int player, string peonType, int count, bool veryEasy, int time, int nextState) {
    AIEnableStock(player);
    if (veryEasy) {
        AIVeryEasyHarvest(player, peonType, count);
    }
    if (AIGetTime() < time) {
        return true;
    }
    AIGenericStock(player, nextState, e_mainSubState_GndB);
    return false;
}

bool AIEnableVeryEasyStockMidA (int player, string peonType, int count) {
    return AIEnableStockMidA(player, peonType, count, true, 840, e_mainState_Mid0);
}
bool AIEnableEasyStockMidA (int player) {
    return AIEnableStockMidA(player, "", 0, false, 790, e_mainState_Mid1);
}
bool AIEnableMediumStockMidA (int player) {
    return AIEnableStockMidA(player, "", 0, false, 740, e_mainState_Mid2);
}
bool AIEnableHardStockMidA (int player) {
    return AIEnableStockMidA(player, "", 0, false, 690, e_mainState_Mid3);
}

//==================================================================================================
//  MID B
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//	AIEnableStockMidB
//--------------------------------------------------------------------------------------------------
bool AIEnableStockMidB (int player, string peonType, int count, bool veryEasy, int time, int nextState) {
    AIEnableStock(player);
    if (veryEasy) {
        AIVeryEasyHarvest(player, peonType, count);
    }
    if (AIGetTime() < time) {
        return true;
    }
    AIGenericStock(player, nextState, e_mainSubState_GndA);
    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsClearObs, true);
    return false;
}
bool AIEnableVeryEasyStockMidB (int player, string peonType, int count) {
    return AIEnableStockMidB(player, peonType, count, true, 1200, e_mainState_Late0);
}
bool AIEnableEasyStockMidB (int player, string peonType, int count) {
    return AIEnableStockMidB(player, peonType, count, false, 1130, e_mainState_Late1);
}
bool AIEnableMediumStockMidB (int player, string peonType, int count) {
    return AIEnableStockMidB(player, peonType, count, false, 1060, e_mainState_Late2);
}
bool AIEnableHardStockMidB (int player, string peonType, int count) {
    return AIEnableStockMidB(player, peonType, count, false, 990, e_mainState_Late3);
}

//==================================================================================================
//  LATE
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//	AIEnableStockLate
//--------------------------------------------------------------------------------------------------
static bool AIEnableStockLate (int player, string peonType, int count, int time) {
    AIEnableStock(player);
    AIVeryEasyHarvest(player, peonType, count);
    if (AIGetTime() % time < 5) {
        return true;
    }
    AIWaveMerge(player, c_waveMain, c_waveAttack);
    AISetAttackState(player, e_attackState_Attack);
	AIResetUserData(player);
    return false;
}

bool AIEnableVeryEasyStockLate (int player, string peonType, int count) {
    return AIEnableStockLate(player, peonType, count, 300);
}
bool AIEnableEasyStockLate (int player, string peonType, int count) {
    return AIEnableStockLate(player, peonType, count, 280);
}
bool AIEnableMediumStockLate (int player, string peonType, int count) {
    return AIEnableStockLate(player, peonType, count, 260);
}
bool AIEnableHardStockLate (int player, string peonType, int count) {
    return AIEnableStockLate(player, peonType, count, 240);
}

//==================================================================================================
//  OTHER
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//	AIPickFrom2
//--------------------------------------------------------------------------------------------------
string AIPickFrom2 (string a, string b) {
	int roll = RandomInt(1,2);
	if (roll == 1) {
		return a;
	}
	return b;
}

//--------------------------------------------------------------------------------------------------
//	AIPickFrom3
//--------------------------------------------------------------------------------------------------
string AIPickFrom3 (string a, string b, string c) {
	int roll = RandomInt(1,3);
	if (roll == 1) {
		return a;
	}
	if (roll == 2) {
		return b;
	}
	return c;
}

//--------------------------------------------------------------------------------------------------
//	AISetStockUserData
//--------------------------------------------------------------------------------------------------
void AISetStockUserData (int player) {
	int index = 1;	
	while (index <= 10) {
	    AISetStock(player, AIGetUserInt(player, index), AIGetUserString(player, index));
	    index = index + 1;
	}
}

//==================================================================================================
//  TECH
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//	TerranTechUp
//--------------------------------------------------------------------------------------------------
void TerranTechUp (int player, int tier) {

	AISetStock( player, 1, c_TB_Barracks );
    AISetStock( player, 1, c_TB_Refinery );
	AISetStock( player, 1, c_TB_BarracksTechLab );
	
	if (tier >= 2) {
		AISetStock( player, 1, c_TB_Factory );
		AISetStock( player, 1, c_TB_FactoryTechLab );
		
		if (tier >= 3) {
			AISetStock( player, 1, c_TB_Starport );
			AISetStock( player, 1, c_TB_StarportTechLab );
		}
	}

	AISetStock( player, 1, c_TB_EngineeringBay );

	if (tier >= 2) {
    	AISetStock( player, 1, c_TB_SensorTower );
		AISetStock( player, 1, c_TB_GhostAcademy );
		AISetStock( player, 1, c_TB_MercCompound );
		
		if (tier >= 3) {
			AISetStock( player, 1, c_TB_Armory );

			if (tier >= 4) {
				AISetStock( player, 1, c_TB_FusionCore );
			}
		}
	}
}

//--------------------------------------------------------------------------------------------------
//	ZergTechUp
//--------------------------------------------------------------------------------------------------
void ZergTechUp (int player, int tier) {

    AISetStock( player, 1, c_ZB_SpawningPool );
    AISetStock( player, 1, c_ZB_Extractor );
    AISetStock( player, 1, c_ZB_EvolutionChamber );
    AISetStock( player, 1, c_ZB_HydraliskDen );

    AISetStock( player, 1, c_ZR_HydraliskSpeed );

    if (tier >= 2) {
        AISetStock( player, 1, c_ZR_OverseerSpeed );
        AISetStock( player, 1, c_ZB_BanelingNest );

        if (tier >= 3) {
            AISetStock( player, 1, c_ZB_RoachWarren );
            AISetStock( player, 1, c_ZB_Spire );
            AISetStock( player, 1, c_ZB_InfestationPit );

            if (tier >= 4) {
                AISetStock( player, 1, c_ZR_OverlordTransport );
                AISetStock( player, 1, c_ZB_UltraliskCavern );
                AISetStock( player, 1, c_ZB_LurkerDen );
                AISetStock( player, 1, c_ZB_GreaterSpire );
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//	ProtossTechUp
//--------------------------------------------------------------------------------------------------
void ProtossTechUp (int player, int tier) {

    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 1, c_PB_Forge );
    AISetStock( player, 1, c_PB_Assimilator );

    if (tier >= 3) {
        AISetStock( player, 1, c_PB_RoboticsFacility );
        AISetStock( player, 1, c_PB_Stargate );
        AISetStock( player, 1, c_PB_TwilightCouncil );

        if (tier >= 4) {
            AISetStock( player, 1, c_PB_TemplarArchives );
            AISetStock( player, 1, c_PB_RoboticsBay );
            AISetStock( player, 1, c_PB_DarkShrine );
            AISetStock( player, 1, c_PB_FleetBeacon );
        }
    }
}
